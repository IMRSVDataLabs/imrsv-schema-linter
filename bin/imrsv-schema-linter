#! /usr/bin/env python3

'''
TODO
'''

from contextlib import contextmanager, redirect_stdout
from typing import List, Iterator
from sys import stdout
from os import isatty
import subprocess
import argparse

import psycopg2

from imrsv.schema_linter.rules import Severity, RuleResult, apply_rules
from imrsv.schema_linter import logger


argument_parser = argparse.ArgumentParser(
    description=__doc__,
    formatter_class=argparse.RawDescriptionHelpFormatter,
)
argument_parser.add_argument(
    '-u', '--url', default='postgresql://',
    help='libpq-compatible DSN or URL per v14 ยง 34.1.1 Connection Strings',
)
argument_parser.add_argument(
    '-f', '--format',
    default='print', choices=('print', 'logfmt'),  # TODO: 'json'
)
argument_parser.add_argument(
    '-l', '--log-level',
    default='warning', choices=Severity.__members__.keys(),
)


@contextmanager
def autopage() -> Iterator[None]:
    if isatty(stdout.fileno()):
        with subprocess.Popen(['less', '-FRXS'],
                              stdin=subprocess.PIPE,
                              universal_newlines=True) as less:
            with redirect_stdout(less.stdin):
                yield
    else:
        yield


def show_results(results: List[RuleResult]) -> None:
    if args.format == 'print':
        for result in results:
            result.print()
    elif args.format == 'logfmt':
        for result in results:
            result.log()


def main(args: argparse.Namespace) -> None:
    logger.setLevel(Severity[args.log_level].value)
    with psycopg2.connect(args.url) as connection:
        with connection.cursor() as cursor:
            with autopage():
                show_results(args, apply_rules(cursor))


if __name__ == '__main__':
    args = argument_parser.parse_args()
    main(args)
