#! /usr/bin/env python3

'''
TODO
'''

from contextlib import contextmanager, redirect_stdout
from typing import List, Iterator
from sys import stdout
from os import isatty
import subprocess
import argparse
import logging

import psycopg2

from imrsv.schema_linter.rules import (
    Severity, Ruleset, RuleResult, apply_rules)
from imrsv.schema_linter import logger


argument_parser = argparse.ArgumentParser(
    description=__doc__,
    formatter_class=argparse.RawDescriptionHelpFormatter,
)
argument_parser.add_argument(
    '-u', '--url', default='postgresql://',
    help='libpq-compatible DSN or URL per PG v14 ยง 34.1.1 Connection Strings',
)
# TODO: Make subcommands instead. Some args should be mutually exclusive, like
# -u and -f rules.
argument_parser.add_argument(
    '-f', '--format',
    default='print', choices=('print', 'logfmt', 'rules'),  # TODO: 'json'
)
argument_parser.add_argument(
    '-l', '--log-level',
    default='warning', choices=Severity.__members__.keys(),
)
argument_parser.add_argument(
    '-s', '--sort-by', choices=('s/t/c', 'c/t/s', 'rule'),
    help='Resort linter output by schema/table/column, the inverse, or by the'
         ' linting rule ID (not name)',
)


@contextmanager
def autopage() -> Iterator[None]:
    if isatty(stdout.fileno()):
        with subprocess.Popen(['less', '-FRXS'],
                              stdin=subprocess.PIPE,
                              universal_newlines=True) as less:
            with redirect_stdout(less.stdin):
                yield
    else:
        yield


def log_results(results: List[RuleResult]) -> None:
    for result in results:
        # TODO: Proper logfmt.
        # TODO: DictCursor instead and sub in
        level, fmt, subs = result.logfmt()
        logger.log(level, fmt, *subs)


# TODO: Pretty
def print_results(results: List[RuleResult]) -> None:
    for result in results:
        print(result.severity.name[0].upper(), result.rule,
              *result.offender.values())
        if logger.isEnabledFor(logging.DEBUG):
            print('##', result.title)
            if result.comment is not None:
                # TODO: textwrap
                for line in (result.comment or '').splitlines():
                    print('#', line.strip())


stc_sort_cols = [
    'table_schema',
    'table_name',
    'column_name',

    'parent_schema',
    'parent_name',
]
cts_sort_cols = reversed(stc_sort_cols)


def show_results(args: argparse.Namespace, results: List[RuleResult]) -> None:
    if args.sort_by is not None:
        if args.sort_by == 's/t/c':
            results.sort(key=lambda res: [res.offender.get(c, '')
                                          for c
                                          in stc_sort_cols])
        elif args.sort_by == 'c/t/s':
            results.sort(key=lambda res: [res.offender.get(c, '')
                                          for c
                                          in cts_sort_cols])
        elif args.sort_by == 'rule':
            results.sort(key=lambda res: res.rule)
    if args.format == 'print':
        print_results(results)
    elif args.format == 'logfmt':
        log_results(results)


def show_rules(args: argparse.Namespace) -> None:
    for rule_id, rule in Ruleset.DEFAULT.rules.items():
        if logger.isEnabledFor(rule.severity.value):
            print(rule.severity.name[0].upper(), rule_id, rule.title)


def main(args: argparse.Namespace) -> None:
    logger.setLevel(Severity[args.log_level].value)
    if args.format == 'rules':
        with autopage():
            show_rules(args)
        return

    with psycopg2.connect(args.url) as connection:
        with connection.cursor() as cursor:
            with autopage():
                show_results(
                    args,
                    apply_rules(cursor, Ruleset.DEFAULT.rules.values())
                )


if __name__ == '__main__':
    args = argument_parser.parse_args()
    main(args)
